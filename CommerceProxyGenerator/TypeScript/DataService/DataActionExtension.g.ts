
    /*!
    * Copyright (c) Microsoft Corporation.
    * All rights reserved. See LICENSE in the project root for license information.
    * THIS FILE IS AN AUTOGENERATED TYPESCRIPT PROXY EXTENSION.
    * TO USE THIS FILE, IT MUST BE ADDED TO A D365COMMERCE APPLICATION
    */
    import {
        AsyncResult,
        callActionOrExecute,
        DataServiceQuery,
        IContext,
        IDataServiceRequest,
        IQueryResultSettings,
        // @ts-ignore -- Unused import
        NullResult
    } from '@msdyn365-commerce/retail-proxy';
    // @ts-ignore -- Unused import
    import * as EntityClasses from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceModels.g';
    // @ts-ignore -- Unused import
    import * as Entities from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
    import * as DataServiceEntities from './DataServiceEntities.g';

    
    function overrideCartLinePriceQuery(): DataServiceQuery {
          return new DataServiceQuery();
          }

    
    export function overrideCartLinePriceInput (
        cartId:
            string,
            lineId:
            string,
            newPrice:
            number
    ): IDataServiceRequest {
      const query = overrideCartLinePriceQuery();
      return query.createDataServiceRequestForOperation(
          'OverrideCartLinePrice',
          true, Entities.Cart,
          'false',
          { bypassCache: 'get', returnEntity: 'Entities.Cart' },
          {
          cartId: cartId,
            lineId: lineId,
            newPrice: newPrice
          }
      );
    }

    export function overrideCartLinePriceAsync (
        context: IContext, cartId:
            string,
            lineId:
            string,
            newPrice:
            number
        ): AsyncResult<Entities.Cart> {
        const request = overrideCartLinePriceInput(cartId, lineId, newPrice);
        return callActionOrExecute<Entities.Cart>(request, context.callerContext);
        }
      
    function simplePingPostQuery(): DataServiceQuery {
          return new DataServiceQuery();
          }

    
    export function simplePingPostInput (
        
    ): IDataServiceRequest {
      const query = simplePingPostQuery();
      return query.createDataServiceRequestForOperation(
          'SimplePingPost',
          true, 
            ''
          ,
          'false',
          { bypassCache: 'get', returnEntity: '' },
          {
          
          }
      );
    }

    export function simplePingPostAsync (
        context: IContext
        ): AsyncResult<boolean> {
        const request = simplePingPostInput();
        return callActionOrExecute<boolean>(request, context.callerContext);
        }
      
    function getOnlineShoppingCartListQuery(): DataServiceQuery {
          return new DataServiceQuery();
          }

    
    export function getOnlineShoppingCartListInput (
        queryResultSettings: IQueryResultSettings
    ): IDataServiceRequest {
      const query = getOnlineShoppingCartListQuery().resultSettings(queryResultSettings);
      return query.createDataServiceRequestForOperation(
          'GetOnlineShoppingCartList',
          true, Entities.Cart,
          'true',
          { bypassCache: 'get', returnEntity: 'Entities.Cart' },
          {
          
          }
      );
    }

    export function getOnlineShoppingCartListAsync (
        context: IContext
        ): AsyncResult<Entities.Cart[]> {
        const request = getOnlineShoppingCartListInput(
          context.queryResultSettings || {});
        return callActionOrExecute<Entities.Cart[]>(request, context.callerContext);
        }
      
    function getCartByIdQuery(): DataServiceQuery {
          return new DataServiceQuery();
          }

    
    export function getCartByIdInput (
        id:
            string
    ): IDataServiceRequest {
      const query = getCartByIdQuery();
      return query.createDataServiceRequestForOperation(
          'GetCartById',
          true, Entities.Cart,
          'false',
          { bypassCache: 'get', returnEntity: 'Entities.Cart' },
          {
          id: id
          }
      );
    }

    export function getCartByIdAsync (
        context: IContext, id:
            string
        ): AsyncResult<Entities.Cart> {
        const request = getCartByIdInput(id);
        return callActionOrExecute<Entities.Cart>(request, context.callerContext);
        }
      
    function searchInventoryDocumentLineQuery(): DataServiceQuery {
          return new DataServiceQuery();
          }

    
    export function searchInventoryDocumentLineInput (
        queryResultSettings: IQueryResultSettings, searchCriteria:
            Entities.InventoryDocumentLineSearchCriteria
    ): IDataServiceRequest {
      const query = searchInventoryDocumentLineQuery().resultSettings(queryResultSettings);
      return query.createDataServiceRequestForOperation(
          'SearchInventoryDocumentLine',
          true, Entities.InventoryInboundOutboundDocumentLine,
          'true',
          { bypassCache: 'get', returnEntity: 'Entities.InventoryInboundOutboundDocumentLine' },
          {
          searchCriteria: searchCriteria
          }
      );
    }

    export function searchInventoryDocumentLineAsync (
        context: IContext, searchCriteria:
            Entities.InventoryDocumentLineSearchCriteria
        ): AsyncResult<Entities.InventoryInboundOutboundDocumentLine[]> {
        const request = searchInventoryDocumentLineInput(
          context.queryResultSettings || {}, searchCriteria);
        return callActionOrExecute<Entities.InventoryInboundOutboundDocumentLine[]>(request, context.callerContext);
        }
      
    function simplePingGetQuery(): DataServiceQuery {
          return new DataServiceQuery();
          }

    
    export function simplePingGetInput (
        
    ): IDataServiceRequest {
      const query = simplePingGetQuery();
      return query.createDataServiceRequestForOperation(
          'SimplePingGet',
          false, 
            ''
          ,
          'false',
          { bypassCache: 'get', returnEntity: '' },
          {
          
          }
      );
    }

    export function simplePingGetAsync (
        context: IContext
        ): AsyncResult<boolean> {
        const request = simplePingGetInput();
        return callActionOrExecute<boolean>(request, context.callerContext);
        }
      

        // @ts-ignore
        function boundControllerQuery(unusualEntityId?: number): DataServiceQuery {
        const key = (unusualEntityId) ? { UnusualEntityId: unusualEntityId } :null;
        return new DataServiceQuery("BoundController", "ExampleEntity", DataServiceEntities.ExampleEntityExtensionClass, key);
        }

        
    export function createCreateExampleEntityInput(entityData: DataServiceEntities.IExampleEntity): IDataServiceRequest {
    const query = boundControllerQuery();
    return query.createDataServiceRequestForOperation('CreateExampleEntity', true, '', 'false', {bypassCache: 'get', returnEntity: ''}, {entityData: entityData });
    }

    
    export function createExampleEntityAsync(context: IContext, entityData: DataServiceEntities.IExampleEntity): AsyncResult<number> {
    const request = createCreateExampleEntityInput(entityData);
    return callActionOrExecute<number>(request, context.callerContext);
    }
  
    export function createUpdateExampleEntityInput(unusualEntityId: number, updatedEntity: DataServiceEntities.IExampleEntity): IDataServiceRequest {
    const query = boundControllerQuery(unusualEntityId);
    return query.createDataServiceRequestForOperation('UpdateExampleEntity', true, '', 'false', {bypassCache: 'get', returnEntity: ''}, {updatedEntity: updatedEntity });
    }

    
    export function updateExampleEntityAsync(context: IContext, unusualEntityId: number, updatedEntity: DataServiceEntities.IExampleEntity): AsyncResult<boolean> {
    const request = createUpdateExampleEntityInput(unusualEntityId, updatedEntity);
    return callActionOrExecute<boolean>(request, context.callerContext);
    }
  
    export function createDeleteExampleEntityInput(unusualEntityId: number): IDataServiceRequest {
    const query = boundControllerQuery(unusualEntityId);
    return query.createDataServiceRequestForOperation('DeleteExampleEntity', true, '', 'false', {bypassCache: 'get', returnEntity: ''}, { });
    }

    
    export function deleteExampleEntityAsync(context: IContext, unusualEntityId: number): AsyncResult<boolean> {
    const request = createDeleteExampleEntityInput(unusualEntityId);
    return callActionOrExecute<boolean>(request, context.callerContext);
    }
  
    export function createGetAllExampleEntitiesInput(queryResultSettings: IQueryResultSettings): IDataServiceRequest {
    const query = boundControllerQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetAllExampleEntities', false, DataServiceEntities.ExampleEntityExtensionClass, 'true', {bypassCache: 'none', returnEntity: 'DataServiceEntities.IExampleEntity'}, { });
    }

    
    export function getAllExampleEntitiesAsync(context: IContext): AsyncResult<DataServiceEntities.IExampleEntity[]> {
    const request = createGetAllExampleEntitiesInput(
      context.queryResultSettings || {}, );
    return callActionOrExecute<DataServiceEntities.IExampleEntity[]>(request, context.callerContext);
    }
  